Tree - An acyclic graph.

  - Root 
  - Branches


Graph 
  G = (V, E)
  V = {1, 2, 3}
  E = {(1,2), (1,3)}


                 1
                / \
               2   3

Types of Trees
   Binary Tree  - at most two descendant


        1
       / \
      2   3
     4 5 6 7

Parse Tree
  - Each node has an arbitrary number of children (determined by
    grammar)

  - Interior vertices (nodes) of a parse tree are operations.

  - Leaves are atomic values (Variables, Literals, Etc.)

  - Root is the start symbol
  
Example Program
---------------
input x
x + 2


                      Program
                   /           \     
                 INPUT        ADD
                   |          /  \
                   x         x    2

Non-Intutitve Parse Pattern

Things like:

E -> TE'
E' -> +TE' | -TE' | ""

E()
   node = T()

   # one of three things happens

   ATOMIC
     | 
    node


      ADD
     /   \
   node   result of term


      SUB
     /   \
   node   result of term

Logic
  if e' is the null string:
      Parse tree is ATOMIC
  else
      tree = e'()
      tree.left = node

     


What about an expression like this:

    3+2+4+5

      + 
    3    +
       2   +
          4  5

  3
  e'()
    +
      2
1.) E()
1.1) left = 3
1.2) E'()
     2.1) left = +
     2.2) 2  
             +
               2
     2.3) node = E'()
       3.1) left = +
       3.2) 4
             + 
               4
       3.3) node = E'()
         4.1) left = +
         4.2) 5
             + 
               5
       3.4) my left becomes the left child of E'
        
             +
           +   5
             4

     2.4)          +
            /     / \
           +     +     5
            2     \
                   4
1.3)

                      +
             3   +     +   5
                  2      
            It turns into a mess!

The above is a common parser mistake.
